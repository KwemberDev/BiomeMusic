buildscript {
    repositories {
        maven {
            url = 'https://maven.minecraftforge.net/'
        }
        maven {
            url = 'https://repo.spongepowered.org/maven'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'

version = "${mod_version}"
group = "${mod_id}"
archivesBaseName = "${mod_name}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    runs {
        client {
            args "--username=InDev"

            jvmArg "-Dmixin.hotSwap=true"
            jvmArg "-Dmixin.checks.interfaces=true"

            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {

            jvmArg "-Dmixin.hotSwap=true"
            jvmArg "-Dmixin.checks.interfaces=true"

            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        url = 'https://repo.spongepowered.org/maven'
    }

    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation 'com.googlecode.soundlibs:vorbisspi:1.0.3.3'
    compileOnly 'org.ow2.asm:asm-util:6.2'              // Available only at compile time
    compileOnly 'org.ow2.asm:asm:6.2'
    compileOnly 'org.ow2.asm:asm-tree:6.2'
    compileOnly 'org.ow2.asm:asm-analysis:6.2'

}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", minecraft_version

    filesMatching('mcmod.info') {
        expand 'mod_id': mod_id, 'mod_name': mod_name, 'version': project.version,
                'mcversion': minecraft_version, 'mod_description': mod_description,
                'mod_author': mod_author
    }
}

configurations.all {
    resolutionStrategy {
        force 'org.ow2.asm:asm:5.2' // Use an older, compatible ASM version
    }
}

// Additionally, exclude problematic files during dependency resolution
configurations {
    runtimeClasspath {
        exclude group: 'org.ow2.asm', module: 'asm-util'
        exclude group: 'org.ow2.asm', module: 'asm-analysis'
        exclude group: 'org.ow2.asm', module: 'asm-tree'
        exclude group: 'org.ow2.asm', module: 'asm'
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_name,
                "Specification-Version"   : "1",
                "Implementation-Title"    : mod_name,
                "Implementation-Version"  : mod_version,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "FMLCorePluginContainsFMLMod": "true",
                "ForceLoadAsMod": "true", // Comment out for dev environment, uncomment for build
                'FMLAT': 'biomemusic_at.cfg'  // Point to the access transformer config
        ])
    }

    // Include runtime dependencies, but exclude vanilla resources
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Exclude specific paths or files
    exclude('META-INF/versions/**', 'module-info.class')
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
    exclude 'assets/minecraft/**' // Exclude all vanilla resources
    exclude 'data/minecraft/**'   // Exclude vanilla data packs
    exclude 'pack.mcmeta'         // Exclude pack metadata if unnecessary

    // Handle duplicates to prevent conflicts
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
jar.finalizedBy('reobfJar')